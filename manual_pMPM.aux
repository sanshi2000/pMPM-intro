\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\babel@aux{english}{}
\babel@aux{english}{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Getting started with a simple example}{2}{section.2}}
\newlabel{ch:start}{{2}{2}{Getting started with a simple example}{section.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces The procedures of performing a numerical analysis and where each of them is done when using pMPM on Linux. SALOME and Paraview are software, `problem.bc' and `run.sh' are text files. }}{2}{figure.1}}
\newlabel{fig:simulation}{{1}{2}{The procedures of performing a numerical analysis and where each of them is done when using pMPM on Linux. SALOME and Paraview are software, `problem.bc' and `run.sh' are text files}{figure.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Simple stretch: (a) geometry and (b) deformed configuration with $6.8$m displacement.}}{3}{figure.2}}
\newlabel{fig:stretch_geo}{{2}{3}{Simple stretch: (a) geometry and (b) deformed configuration with $6.8$m displacement}{figure.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces CAD is built and quadratic mesh is generated in SALOME with nodes grouped for boundary conditions.}}{3}{figure.3}}
\newlabel{fig:box_mesh}{{3}{3}{CAD is built and quadratic mesh is generated in SALOME with nodes grouped for boundary conditions}{figure.3}{}}
\newlabel{file:box_bc}{{2.1}{4}{Getting started with a simple example}{tcb@cnt@file.2.1}{}}
\@writefile{lol}{\contentsline {lstlisting}{code/box.bc}{4}{lstlisting.-1}}
\newlabel{file:run}{{2.2}{4}{Getting started with a simple example}{tcb@cnt@file.2.2}{}}
\@writefile{lol}{\contentsline {lstlisting}{code/run.sh}{4}{lstlisting.-2}}
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces Meaning of user options in File \ref  {file:run}}}{5}{table.1}}
\newlabel{tab:opt}{{1}{5}{Meaning of user options in File \ref {file:run}}{table.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces The computational mesh and material points with total displacement at the beginning of the third load step are visualized in Paraview.}}{6}{figure.4}}
\newlabel{fig:box_disp}{{4}{6}{The computational mesh and material points with total displacement at the beginning of the third load step are visualized in Paraview}{figure.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Files structure involving a minimal example -- `stretch'. \texttt  {pMPM} is the executable, built from the source code \texttt  {pMPM.cpp} by \texttt  {make all} in the directory `examples'. Running the simulation of the simple stretch of a box by \texttt  {./run.sh} reads the model in the directory `input', and saves all outputs in the directory `results\_files'.}}{7}{figure.5}}
\newlabel{fig:cs-exp}{{5}{7}{Files structure involving a minimal example -- `stretch'. \code {pMPM} is the executable, built from the source code \code {pMPM.cpp} by \code {make all} in the directory `examples'. Running the simulation of the simple stretch of a box by \code {./run.sh} reads the model in the directory `input', and saves all outputs in the directory `results\_files'}{figure.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}How to run pMPM in parallel}{7}{section.3}}
\newlabel{ch:exp}{{3}{7}{How to run pMPM in parallel}{section.3}{}}
\newlabel{tip:mesh}{{3.2}{8}{How to run pMPM in parallel}{tcb@cnt@tip.3.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Double-notched plate: (a) geometry and boundary conditions, the roller boundary condition on both back and front surfaces is not shown; (b) the patch mesh with colors indicating on two processes; (c) the computational mesh, generated from the patch mesh; and (d) the material points in the deformed configuration with $u=1$\tmspace  +\thinmuskip {.1667em}mm.}}{8}{figure.6}}
\newlabel{fig:notch_res}{{6}{8}{Double-notched plate: (a) geometry and boundary conditions, the roller boundary condition on both back and front surfaces is not shown; (b) the patch mesh with colors indicating on two processes; (c) the computational mesh, generated from the patch mesh; and (d) the material points in the deformed configuration with $u=1$\,mm}{figure.6}{}}
\newlabel{tip:prun}{{3.3}{8}{How to run pMPM in parallel}{tcb@cnt@tip.3.3}{}}
\newlabel{file:plate_bc}{{3.1}{9}{How to run pMPM in parallel}{tcb@cnt@file.3.1}{}}
\@writefile{lol}{\contentsline {lstlisting}{code/plate.bc}{9}{lstlisting.-3}}
\newlabel{file:plate_sh}{{3.2}{9}{How to run pMPM in parallel}{tcb@cnt@file.3.2}{}}
\@writefile{lol}{\contentsline {lstlisting}{code/run\textunderscore plate.sh}{9}{lstlisting.-4}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Double-notched plate: magnitude of reaction force against the displacement.}}{10}{figure.7}}
\newlabel{fig:notch_fr}{{7}{10}{Double-notched plate: magnitude of reaction force against the displacement}{figure.7}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Code structure and new development}{10}{section.4}}
\newlabel{ch:exe}{{4}{10}{Code structure and new development}{section.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces Files structure for programming in the pMPM. The main function is \texttt  {pMPM.cpp} with some user defined functions in \texttt  {functions.cpp}. The \texttt  {NRFunctions.cpp} includes computation of Jacobian and functions.}}{11}{figure.8}}
\newlabel{fig:cs-prog}{{8}{11}{Files structure for programming in the pMPM. The main function is \code {pMPM.cpp} with some user defined functions in \code {functions.cpp}. The \code {NRFunctions.cpp} includes computation of Jacobian and functions}{figure.8}{}}
\@writefile{toc}{\contentsline {section}{Appendix \numberline {A}Installation of the program}{12}{Appendix.1.A}}
\newlabel{app:install}{{A}{12}{Installation of the program}{Appendix.1.A}{}}
\@writefile{toc}{\contentsline {section}{Appendix \numberline {B}User options}{12}{Appendix.1.B}}
\newlabel{app:option}{{B}{12}{User options}{Appendix.1.B}{}}
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces Meaning of user options in File \ref  {file:run}}}{12}{table.2}}
\newlabel{tab:opt}{{2}{12}{Meaning of user options in File \ref {file:run}}{table.2}{}}
